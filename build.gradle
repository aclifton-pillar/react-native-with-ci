plugins {
    id "base"
    id "com.wiredforcode.spawn" version '0.8.2'
}

description = 'build'
version = '0.0'

task npmInstall(group: "mobile") {
    ext.npmInstall = { ->
        exec {
            commandLine 'npm', 'install'
        }
    }

    ext.npmInstallDetoxCli = { ->
        exec {
            commandLine 'npm', 'install', '-g', 'detox-cli'
        }
    }

    doFirst {
        npmInstall()
        npmInstallDetoxCli()
    }
}

task installApplesimutils(group: "mobile") {
    ext.tapWix = { ->
        exec {
            commandLine 'brew', 'tap', 'wix/brew'
        }
    }

    ext.installApplesimutils = { ->
        exec {
            commandLine 'brew', 'install', 'applesimutils'
        }
    }

    ext.checkForApplesimutils = { ->
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'brew', 'info', 'applesimutils'
            standardOutput = stdout
        }
        def lines = "$stdout".split("\n")
        if (lines.any{ it.contains('Not installed') }) {
            installApplesimutils()
        } else {
            println("applesimutils found already installed")
        }
    }

    doFirst {
        tapWix()
        checkForApplesimutils()
    }
}

task launchMetroBundler(group: "mobile", dependsOn: ["npmInstall", "installApplesimutils"]) {
    doFirst {
        try {
            def proc = "npm run start &".execute()
            def reader = proc.in.newReader()
            def lastLine = ""
            while (!lastLine.contains("done.")) {
                println(lastLine)
                lastLine = reader.readLine()
                if (lastLine == null) {
                    throw new AlreadyRunningException("Metro bundler found already running.")
                }
            }
            println(lastLine)
            println("Started Metro Bundler")
        } catch (AlreadyRunningException ex) {
            println(ex.getMessage())
        }
    }
}

task unitTest(group: "mobile", dependsOn: "npmInstall") {
    ext.unitTest = { ->
        exec {
            commandLine 'npm', 'run', 'test'
        }
    }

    doFirst {
        unitTest()
    }
}

task iosTest(group: "mobile", dependsOn: ["launchMetroBundler"]) {
    ext.detoxBuild = { ->
        exec {
            commandLine 'detox', 'build', '--configuration', 'ios.sim.debug'
        }
    }

    ext.detoxTest = { ->
        exec {
            commandLine 'detox', 'test',  '--configuration', 'ios.sim.debug'
        }
    }

    doFirst {
        detoxBuild()
        detoxTest()
    }
}

task iosCI(group: "ci_builds", dependsOn: ["iosTest", "unitTest"]) {
    doFirst {
        println("Starting Full iOS Continuous Integration Build and Test")
    }
}

class AlreadyRunningException extends Exception {
    public AlreadyRunningException(String message) {
        super(message)
    }
}
