plugins {
    id 'base'
}

description = 'build'
version = '0.0'

task npmInstall(group: 'mobile') {
    ext.npmInstall = { ->
        exec {
            commandLine 'npm', 'install'
        }
    }

    ext.npmInstallDetoxCli = { ->
        exec {
            commandLine 'npm', 'install', '-g', 'detox-cli'
        }
    }

    doFirst {
        npmInstall()
        npmInstallDetoxCli()
    }
}

task unitTest(group: 'mobile') {
    dependsOn 'npmInstall'
    ext.unitTest = { ->
        exec {
            commandLine 'npm', 'run', 'test'
        }
    }

    doFirst {
        unitTest()
    }
}

task installApplesimutils(group: 'mobile') {
    ext.tapWix = { ->
        exec {
            commandLine 'brew', 'tap', 'wix/brew'
        }
    }

    ext.installApplesimutils = { ->
        exec {
            commandLine 'brew', 'install', 'applesimutils'
        }
    }

    ext.checkForApplesimutils = { ->
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'brew', 'info', 'applesimutils'
            standardOutput = stdout
        }
        def lines = "$stdout".split('\n')
        if (lines.any{ it.contains('Not installed') }) {
            installApplesimutils()
        } else {
            println('applesimutils found already installed')
        }
    }

    doFirst {
        tapWix()
        checkForApplesimutils()
    }
}

task setupAvd(group: 'mobile') {
    ext.acceptSdkLicenses = { ->
        exec {
            commandLine 'sdkmanager', '--licenses'
            standardInput new FileInputStream('./yes.txt')
        }
    }

   ext.installSdk = { ->
        exec {
            commandLine 'sdkmanager', 'system-images;android-28;google_apis_playstore;x86'
        }
    }

   ext.createAvd = { ->
        exec {
            commandLine 'avdmanager', 'create', 'avd',
                '--name', '__android-ci-avd__',
                '--package', 'system-images;android-28;google_apis_playstore;x86',
                '--device', 'Nexus 5X',
                '--force'
        }
    }

    doFirst {
        acceptSdkLicenses()
        installSdk()
        createAvd()
    }
}

task removeAvd(group: 'mobile') {
    ext.removeAvd = { ->
        exec {
            commandLine 'avdmanager', 'delete', 'avd', '__android-ci-avd__'
        }
    }

    doFirst {
        removeAvd()
    }
}

task launchMetroBundler(group: 'mobile') {
    dependsOn 'npmInstall'
    doFirst {
        try {
            def proc = 'npm run start &'.execute()
            def reader = proc.in.newReader()
            def lastLine = ''
            while (!lastLine.contains('done.')) {
                println(lastLine)
                lastLine = reader.readLine()
                if (lastLine == null) {
                    throw new AlreadyRunningException('Metro bundler found already running.')
                }
            }
            println(lastLine)
            println('Started Metro Bundler')
        } catch (AlreadyRunningException ex) {
            println(ex.getMessage())
        }
    }
}

launchMetroBundler.mustRunAfter('installApplesimutils')
launchMetroBundler.mustRunAfter('setupAvd')

task killMetroBundler(group: 'mobile') {
    ext.getMetroBundlerPid = { ->
        def proc = "lsof -n -i4TCP:8081".execute()
        def reader = proc.in.newReader()
        while (true) {
            def line = reader.readLine()
            if (line == null) break
            if (line.contains('LISTEN')) {
                return line.split()[1]
            }
        }
    }

    ext.killProc = { pid ->
        exec {
            commandLine 'kill', pid
        }
    }

    doFirst {
        def pid = getMetroBundlerPid()
        if (pid) killProc(pid)
    }
}

task iosTest(group: 'mobile') {
    dependsOn 'launchMetroBundler', 'installApplesimutils'

    ext.detoxBuild = { ->
        exec {
            commandLine 'detox', 'build', '--configuration', 'ios.sim.debug'
        }
    }

    ext.detoxTest = { ->
        exec {
            commandLine 'detox', 'test',  '--configuration', 'ios.sim.debug'
        }
    }

    doFirst {
        detoxBuild()
        detoxTest()
    }
}

task androidTest(group: 'mobile') {
     dependsOn 'launchMetroBundler'//, 'setupAvd'
    dependsOn 'npmInstall'

    ext.detoxBuild = { ->
        exec {
            commandLine 'detox', 'build', '--configuration', 'android.emu.debug'
        }
    }

    ext.detoxTest = { ->
        exec {
            commandLine 'detox', 'test',  '--configuration', 'android.emu.debug'
        }
    }

    doFirst {
        detoxBuild()
        detoxTest()
    }
}

// iosTest.finalizedBy(killMetroBundler)
// androidTest.finalizedBy(killMetroBundler)

task iosCI(group: 'ci_builds') {
    dependsOn 'iosTest', 'unitTest'
}

task androidCI(group: 'ci_builds') {
    dependsOn 'androidTest', 'unitTest'
}

androidCI.finalizedBy(removeAvd)

class AlreadyRunningException extends Exception {
    public AlreadyRunningException(String message) {
        super(message)
    }
}
